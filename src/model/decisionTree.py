import DecisionTree
import commands
import numpy as np
import csv
import os


class DecisionTreeModel:
	def __init__(self, csvfile = '../../data/ExtractionLogs/SF2.51.54.23.csv', logfile = '../../data/ExtractionLogs/SF2.51.54.23.log'):
		'''
		Now the input file is:
		benign mean,2.5
		malicious mean,1.5
		benign variance,4.2
		malicious variance,3
		'''
		self.csvfile = csvfile
		data = np.genfromtxt(self.csvfile, dtype=float, delimiter=',')
		self.data = np.transpose(data)
		self.data[:,0:3226] = self.data[:,0:3226] / 0.1
		self.data = self.data.astype(int)
		self.logfile = logfile
		logf = open(self.logfile, 'r')
		self.features = list()
		for line in logf:
			self.features.append(line[:-1])
		logf.close()

	def inputForMatlab(self):
		None


	def splitData(self, p):
		None		

	def genTrainData(self, trainfile):
		None

	def genTestData(self, testfile):
		None

	def trainModel(self, traindata):
		None

	def testmodel(self, testdata):
		None

	def checkerrorRate(self, result, actual_result):
		None

	def crossValidation(self):
		for p in np.arange(0.2, 1, 0.2):
			train, test = self.splitData(p)
			trainfile = self.genTrainData(train)
			testfile = self.genTestData(test)
			root_node = self.trainModel(trainfile)
			classification = self.testmodel(root_node, testfile)
			errorRate = self.checkerrorRate(classification, actual_result)

	def evalTrainingData(self, training_datafile, num_columns, num_rows):
		eval_data = DecisionTree.EvalTrainingData(
			training_datafile = training_datafile,
			csv_class_column_index = num_columns,
			csv_columns_for_features = [1,num_columns-1],
			entropy_threshold = 0.01,
			# max_depth_desired = 3,
			# symbolic_to_numeric_cardinality_threshold = 10,
			)
		eval_data.get_training_data()
		eval_data.evaluate_training_data()


if __name__=="__main__":
	dt = DecisionTreeModel()
	# dt.crossValidation()

