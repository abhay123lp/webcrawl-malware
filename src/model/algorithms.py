import DecisionTree
import commands
import numpy as np
import csv
import os
import sys

import modelUtils
from scipy.stats import chisquare
from itertools import izip 

class DecisionTreeModel:
	def __init__(self, csvfile = '../../data/ExtractionLogs/SF2.51.54.23.csv', logfile = '../../data/ExtractionLogs/SF2.51.54.23.log'):
		'''
		Now the input file is:
		benign mean,2.5
		malicious mean,1.5
		benign variance,4.2
		malicious variance,3
		'''
		self.csvfile = csvfile
		data = np.genfromtxt(self.csvfile, dtype=float, delimiter=',')
		self.data = np.transpose(data)
		self.data[:,0:3226] = self.data[:,0:3226] / 0.1
		self.data = self.data.astype(int)
		self.logfile = logfile
		logf = open(self.logfile, 'r')
		self.features = list()
		for line in logf:
			self.features.append(line[:-1])
		logf.close()

	def inputForMatlab(self):
		None


	def splitData(self, p):
		None		

	def genTrainData(self, trainfile):
		None

	def genTestData(self, testfile):
		None

	def trainModel(self, traindata):
		None

	def testmodel(self, testdata):
		None

	def checkerrorRate(self, result, actual_result):
		None

	def crossValidation(self):
		for p in np.arange(0.2, 1, 0.2):
			train, test = self.splitData(p)
			trainfile = self.genTrainData(train)
			testfile = self.genTestData(test)
			root_node = self.trainModel(trainfile)
			classification = self.testmodel(root_node, testfile)
			errorRate = self.checkerrorRate(classification, actual_result)

	def evalTrainingData(self, training_datafile, num_columns, num_rows):
		eval_data = DecisionTree.EvalTrainingData(
			training_datafile = training_datafile,
			csv_class_column_index = num_columns,
			csv_columns_for_features = [1,num_columns-1],
			entropy_threshold = 0.01,
			# max_depth_desired = 3,
			# symbolic_to_numeric_cardinality_threshold = 10,
			)
		eval_data.get_training_data()
		eval_data.evaluate_training_data()


class FeatureSelector:
	'''
	The feature file is either horizonal or vertical.
	Horizonal means one row represent one feature.
	Vertcal means one column represent one feature.
	'''
	def __init__(self, featurelist, featurefile, indexing='h'):
		if indexing == 'v':
			modelUtils.transposeLargeFile(featurefile, 'T' + featurefile)
			featurefile = 'T' + featurefile
		self.reader = csv.reader(open(featurefile, 'r'))
		self.flist = csv.reader(open(featurelist, 'r'))
		csv.field_size_limit(sys.maxsize)

	def mychisquare(self, values):
		# Uses chisquare
		# chisquare(values)
		# Implement chisquare
		# A = malicious contexts with feature
		# B = benign contexts with feature
		# C = malicious contexts without feature
		# D = benign contexts without feature
		total = len(values)
		btotal = total / 2
		mtotal = total - btotal
		A = np.sum([1 for item in values[btotal:] if item == 1])
		B = np.sum([1 for item in values[:btotal] if item == 1])
		C = np.sum([1 for item in values[btotal:] if item == 0])
		D = np.sum([1 for item in values[:btotal] if item == 0])
		# print 'A:{0}, B:{1}, C:{2}, D:{3}'.format(A,B,C,D)
		return (A*D - C*B)*(A*D - C*B) / ( (A+C)* (B+D) * (A+B) * (C+D) )

	def weightedChisquare(self, values):
		# Uses chisquare
		# chisquare(values)
		# Implement chisquare
		# A = malicious contexts with feature
		# B = benign contexts with feature
		# C = malicious contexts without feature
		# D = benign contexts without feature
		total = len(values)
		btotal = total / 2
		mtotal = total - btotal
		A = np.sum([item for item in values[btotal:] if item > 0])
		B = np.sum([item for item in values[:btotal] if item > 0])
		C = np.sum([1 for item in values[btotal:] if item == 0])
		D = np.sum([1 for item in values[:btotal] if item == 0])
		return (A*D - C*B)*(A*D - C*B) / ( (A+C) * (B+D) * (A+B) * (C+D) )


	def binarizedFeature(self, outlist, outfile, threshold=10.83):
		writer = csv.writer(open(outfile, 'w'))
		outlist = csv.writer(open(outlist, 'w'))
		for row, feature in izip(self.reader, self.flist):
			row = np.array(row).astype(np.int)
			# print self.mychisquare(row)
			if self.mychisquare(row) > threshold:
				writer.writerow(row)
				outlist.writerow(feature)


if __name__=="__main__":
	# dt = DecisionTreeModel()
	# dt.crossValidation()
	'''
	fs = FeatureSelector('/space/outputlogs112/backup/Flat-Level-Features-In-CSV-Order.log', \
		'/space/outputlogs112/backup/BinarizeFeature0.csv')
	fs.binarizedFeature('/space/outputlogs112/backup/featurelist0.log', \
		'/space/outputlogs112/backup/features0.csv', threshold=1.64) # 0.8
	'''
	hold = 0
	chishold = 0.75
	# modelUtils.processFile(threshold = hold)
	fs = FeatureSelector('/space/outputlogs112/Flat-Level-Features-In-CSV-Order.log', '/space/outputlogs112/BinarizeFeature{0}.csv'.format(hold))
	fs.binarizedFeature('/space/outputlogs112/featurelist{0}.log'.format(hold), '/space/outputlogs112/features{0}.csv'.format(hold), threshold=chishold)

