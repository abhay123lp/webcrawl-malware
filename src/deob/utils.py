import jsbeautify
import rmcomment
import chunkJS
import malurl

import commands
import os


def checkdir(inputdir, outputdir):
	'''Return False if input dir doesn't exist, o.w. True.'''
	if not os.path.exists(inputdir):
		print "Error: Input directory doesn't exist."
		return False
	if not os.path.exists(outputdir):
		os.makedirs(outputdir)	
	return True


def checkfile(inputfile, outputfile):
	'''Return False if the input is not a file or output already exists, o.w. True.'''
	if not os.path.isfile(inputfile):
		return False
	if os.path.exists(outputfile):
		return False
	return True


def lsresult(regex):
	res = commands.getoutput('ls ' + regex)
	return res.split('\n')


def lsgrep(rels, regrep):
        res = commands.getoutput('ls ' + rels + ' | grep ' + regrep)
        return res.split('\n')


def genTempnameLine(line):
	line = line.split('\',\'')
	url = line[1]
	url_hash = line[0][2:]
	label = line[3]
	return genTempnameTuple(url, url_hash, label)


def genTempnameTuple(url, url_hash, label):
	outfilename = label + '.' + url_hash
	jsWithComment = '../../data/TempData/JSFileWComments/'
	jsNoComment = '../../data/TempData/JSFiles/'
	jsChunk = '../../data/TempData/JSFiles/'
	jsBeautify = '../../data/JSAdd2Tree/'
	return url, jsWithComment+outfilename+'.js', jsNoComment+outfilename+'.js', jsChunk+outfilename, jsBeautify+outfilename



def findHash(urltofind, cmpfile = '../../data/TempData/URLs/terryurl'):
	urltofind = 'http://ruian.gtisc.gatech.edu/Terry/' + urltofind
	cmpf = open(cmpfile, 'r')
	for compare in cmpf:
		line = compare.split('\',\'')
		url = line[1]
		url_hash = line[0][2:]
		if url == urltofind:
			return url_hash



def checkEmpty(result):
	'''
	Check whether one file leads to empty result.
	Compare the empty hashed filename with the record in URLs/terryurl.
	'''
	infile = '../../data/JSZipped/emptyfile'
	inf = open(infile, 'r')
	hashtofind = findHash(result)
	for line in inf:
		if line.split('.')[1][:-1] == hashtofind:
			return True
	return False




def D8Terry():
	'''
	Use modified d8 to run javascript given by Terry.
	'''
	indir = '../../data/JSTerry/javascript_20131018/'
	outdir = '../../data/TempData/JSFileWComments/'
	jsChunk = '../../data/TempData/JSFiles/'
	jsBeautify = '../../data/JSAdd2Tree/'

	results = lsresult(indir)
	for result in results:
		if not checkEmpty(result):
			continue
		# First
		# Use d8 to generate output
		# Remove the ones that have syntax error.
		'''
		commands.getoutput('d8 ' + indir + result + ' > ' + outdir + 'MTerry.' + findHash(result) + '.js')
		'''
		outfilename = 'MTerry.' + findHash(result)
		jscommentname = outdir + outfilename + '.js'
		if not os.path.exists(jscommentname):
			continue

		# Third
		# for scripts that doesn't work with modified chrome and v8
		# just beautify them
		print jscommentname
		beautifydir = jsBeautify + outfilename
		jsbeautify.jsdeobfuscatefile(indir + result, beautifydir + '/0')
		print beautifydir
	
		# Second
		# Use d8 to generate output
		# work on the modified v8 generated scripts
		'''
		chunkoutdir = jsChunk + outfilename
		beautifydir = jsBeautify + outfilename
		chunkJS.chunkJSFile(jscommentname, chunkoutdir)
		jsbeautify.jsdeobfuscatedir(chunkoutdir, beautifydir)
		'''
	

def NonsenseJSFromTerry(outfile = '../../data/JSTerry/javascript_20131018/NonsenseJSFromTerry'):
	indir = '../../data/JSTerry/javascript_20131018/'
	results = lsresult(indir)
	outf = open(outfile, 'w')
	for result in results:
		if checkEmpty(result):
			outf.write(result + '\n')
	outf.close()



class LOG:
	def __init__(self, logfile = '../../data/TempData/URLs/LOG'):
		self.logs = dict()
		self.logfile = logfile
		if not os.path.exists(self.logfile):
			# If the file doesn't exist, create one
			self.SAVELOG()
		self.logf = open(self.logfile, 'r')
		for line in self.logf:
			line = line[:-1].split(',')
			self.logs[line[0]] = int(line[1])
		self.logf.close()

	def LOADLOG(self):
		self.logf = open(self.logfile, 'r')
		self.logs = dict()
		for line in self.logf:
			line = line[:-1].split(',')
			self.logs[line[0]] = int(line[1])
		self.logf.close()

	def STATUS(self, filename):
		if filename not in self.logs:
			self.logs[filename] = 0
		return self.logs[filename]

	def UPDATE(self, filename, progress):
		self.logs[filename] = progress
		self.SAVELOG()
		self.LOADLOG()

	def SAVELOG(self):
		self.logf = open(self.logfile, 'w')
		for key in self.logs:
			self.logf.write(key + ',' + str(self.logs[key]) + '\n')
		self.logf.close()
		
