import random
import utils

def getFilenameForClass(classname):
	groundTruthPath = '../../data/JSAdd2Tree/'
	return random.shuffle(utils.lsresult( \
		'{0}/{1}*'.format(groundTruthPath, classname)))
	
def pickGroundTruth(malClassList, numPerClass=1000, includeBenign=True):
	# The benign class is included by default
	# The format for malClassList is:
	# type,label,totalCount
	#
	# @type, name of a malicious class
	# @label, for example, M123, a string to identify type
	# @totalCount, availble number of urls for this class
	allClasses = [label for label in open(malClassList, 'r')]
	allClasses = list()
	toUseCount = dict()
	for line in open(malClassList, 'r'):
		line = line.split(',')
		totalCount = int(line[2])
		toUseCount[line[1]] = min(totalCount, numPerClass)
		allClasses.append(line[1])

	# Add benign classes
	if includeBenign:
		label = 'B1'
		allClasses.append(label)
		toUseCount[label] = numPerClass
	
	# Traverse classes and select samples
	for label in allClasses:
		# Get toUseCount for each class.
		filenames = getFilenameForClass(label)[:toUseCount[label]]
	# How do I handle invalid urls?
	
	





	sample = GetSample()

	if mcount == None:
		samplefile = '{0}SamplesWTerryList'.format(bcount)
		outputdir = '/space/webcrawl-malware/data/{0}SamplesWTerry/'.format(bcount) 
		mcount = bcount / 2
		bcount = bcount - mcount
	else:
		samplefile = '{0}B{1}MSamplesWTerryList'.format(bcount, mcount)
		outputdir = '/space/webcrawl-malware/data/{0}B{1}MSamplesWTerry/'.format(bcount, mcount)

	# Check whether to include Terry's examples.
	if wTerry == True:
		sample.jslistNoTerry()
		mcount = mcount - 56
	else:
		samplefile = '{0}B{1}MSamplesList'.format(bcount, mcount)
		outputdir = '/space/webcrawl-malware/data/{0}B{1}MSamples/'.format(bcount, mcount)

	# Check whether bSort is valid
	if bSort != 'Alexa' and bSort != 'Size' and bSort != 'Random':
		print 'Unexpected Value for bSort!\nOnly Alexa and Size are Accepted.'
		sys.exit(1)

	# Generate sample list
	sample.sampleList(maliciouscount = mcount, benigncount = bcount, outfile = samplefile, benignsort = bSort)
	GetSample().copySampleList(samplefile = samplefile, outdir = outputdir)

	if wTerry == True:
		'''copySampleList will create directory if not exist'''
		GetSample().copyTerry(jsdir ='/space/webcrawl-malware/data/JSAdd2Tree/', outdir = outputdir)


if __name__ == '__main__':
	pickGroundTruth(malClassList="/space/webcrawl-malware/data/TempData/URLs/top20.malurl.stats")
