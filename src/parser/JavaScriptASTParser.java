import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;

import org.eclipse.wst.jsdt.core.dom.AST;
import org.eclipse.wst.jsdt.core.dom.ASTNode;
import org.eclipse.wst.jsdt.core.dom.ASTParser;
import org.eclipse.wst.jsdt.core.dom.JavaScriptUnit;


public class JavaScriptASTParser {

	/**
	 * @param args
	 */
	public static void main(String[] args) throws IOException
	{
		ASTParser parser = ASTParser.newParser(AST.JLS3);
		File jsSrc = new File ("JS_source.in");
		Scanner in = new Scanner(jsSrc);
		String jsSrcStr = "";
		
		while(in.hasNextLine())
			jsSrcStr += in.nextLine();
		in.close();
		
		parser.setSource(jsSrcStr.toCharArray());
		parser.setKind(ASTParser.K_COMPILATION_UNIT);
		parser.setResolveBindings(true);
		
		JavaScriptUnit result = (JavaScriptUnit)parser.createAST(null);
		System.out.println(result.getProblems().length);
		System.out.println(result.getTypeRoot());
		
		List<ASTNode> nodeTypes = result.types();
		System.out.println(nodeTypes.size());
		
		for(int i = 0; i < nodeTypes.size(); i++)
		{
		       ASTNode typeNode = (ASTNode) nodeTypes.get(i);
		       System.out.println(ASTNode.nodeClassForType(typeNode.getNodeType()));
		}

		System.out.println();

	}
}
